// Template.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
	//Области видимости данных.
	//   i- Локальные переменные цикла i Уничтожается
	//при его завершении и невидима для остальной программы
	//   x- (только для тела цикла) локальная переменная для каждой итерации цикла
	//уничтожается при завершении итерации и создается заново.
	// ВСЕ локальные переменные строго граниченны блоком кода, в котором они были объявлены.
	//   r - лок пер тела конструкции if и  else 
	// Уничтожаетсяпри его завершении и невидима для остальной программы
	//   n -Локальные переменные блока main 
    //   res num - лок пер. функции func
	

//статические переменные const unsigner static
//Области применения статических элементов:
// 1. Сохранение данный внутри функции для след. её вызова;
// 2. Щадящее отношение к памяти и быстродействию программы;
// 3. Создание общей памяти для всех элементов, пренадлежащих одному множеству (классу или структуре).
//  

//  Глобальные переменные

#include <iostream>

int NUM; // глобальная переменная (верхний регистр для глобальных перемен) 
const double PI = 3.1416; //глобальная константа
int ARR[3]; // глобальный массив

void func() {  // глобальная функция
	static int a = 0; //static - делает переменную статической.
	a++;
	std::cout << a << std::endl;
}

int power(int left, int right = 2) { // Вычесление степени pow  int right = 2 автоматически по умолчанию выводи во 2 степени
	int result = 1;
	for (int i = 1; i <= right; i++)
		result *= left;
	return result;
}


inline int sum(int num1, int num2) { //inline - встраиваемая функция std::cout << n << "+" << m << "=" << n+m << std::endl; 
	return (num1 + num2);//скобки нужны для встраиваеммой функции
}

int max(int num1, int num2) {
	std::cout << " TWO INTS\n";
	return num1 > num2 ? num1 : num2;
}
double max(double num1, double num2) {
	std::cout << " TWO DOUBLES\n";
	return num1 > num2 ? num1 : num2;
}


char max(char sym1, char sym2)
{
	std::cout << " TWO CHARS\n";
	return sym1 > sym2 ? sym1 : sym2;
}

int max(int num1, int num2, int num3) {
	std::cout << " THREE INTS\n";
	return max(max(num1, num2), num3);
}

template <typename T>
void print_arr(T arr[], const int length) {
	std::cout << "{ ";
	for (int i = 0; i < length; i++)
		std::cout << arr[i] << ", ";
	std::cout << "\b\b }\n";
}


int main()
{
	setlocale(LC_ALL,"ru");
	int n, m;

	//Области видимости данных
	
	NUM = 7;

	std::cout <<"NUM = " << NUM << std::endl;
	std::cout << "PI = " << PI << std::endl;

	func();//вызов функции
	func();//вызов функции
	func();//вызов функции

	// Параметры по умолчанию 
	
	std::cout << " 7^2 = " << power(7) << std::endl; // по умолчанию во 2 степень
	std::cout << " 4^3 = " << power(4, 3) << std::endl;
	std::cout << " 5^2 = " << power(5) << std::endl; // по умолчанию во 2 степень
	std::cout << " 10^5 = " << power(10, 5) << std::endl;

	//  Встраиваемые, перегруженные и шаблонные функции.
	
	//  Встраиваемая функция.для оптимизации для работы экономя время и память.
	
	std::cout<< " Введите два числа ";
	std::cin>> n >> m;
	std::cout << n << "+" << m << "=" << sum(n, m) << std::endl;


	//  Перегруженные функции
	//  все экземпляоры перегруж. функции ДОЛЖНЫ отличаться между собой
	//по наборам параметров, а именно по их типам или их количествам.
	
	std::cout << max(7, 15) << std::endl;//15

	std::cout << max(5.4, 5.04) << std::endl;//5.4

	std::cout << max('k', '0') << std::endl;// k

	std::cout << max(7,42,15) << std::endl;// 42


	//   Шаблонная функция - 
	//
	//
	//
	//

	
	const int size = 5;
	int arr[size]{ 7,15,42,105,-77 };

	std::cout << "Массив\n";
	print_arr(arr, size);




	return 0;

}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
